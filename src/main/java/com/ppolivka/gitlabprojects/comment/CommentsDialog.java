package com.ppolivka.gitlabprojects.comment;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.ppolivka.gitlabprojects.common.ReadOnlyTableModel;
import git4idea.DialogManager;
import org.gitlab.api.models.GitlabNote;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Date;
import java.util.List;

/**
 * Dialog for listing comments
 *
 * @author ppolivka
 * @since 1.3.2
 */
public class CommentsDialog extends DialogWrapper {

    private JPanel panel;
    private JTable comments;
    private JButton addCommentButton;

    private Project project;
    private VirtualFile file;
    private GitLabCommentsListWorker worker;

    public CommentsDialog(@Nullable Project project, GitLabCommentsListWorker worker, VirtualFile file) {
        super(project);
        this.project = project;
        this.worker = worker;
        this.file = file;
        init();
    }

    @Override
    protected void init() {
        super.init();

        setTitle("Comments");

        reloadModel();

        comments.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent me) {
                if (me.getClickCount() == 2) {
                    String name = (String) comments.getValueAt(comments.getSelectedRow(), 0);
                    Date date = (Date) comments.getValueAt(comments.getSelectedRow(), 1);
                    String body = (String) comments.getValueAt(comments.getSelectedRow(), 2);
                    DialogManager.show(new CommentDetail(project, name, date, body));
                }
            }
        });

        addCommentButton.addActionListener(e -> {
            new AddCommentDialog(project, worker.getMergeRequest(), file).show();
            this.worker = GitLabCommentsListWorker.create(project, worker.getMergeRequest(), file);
            reloadModel();
            comments.repaint();
        });

    }

    private void reloadModel() {
        comments.setModel(commentsModel(worker.getComments()));
        comments.getColumnModel().getColumn(0).setPreferredWidth(100);
        comments.getColumnModel().getColumn(1).setPreferredWidth(150);
        comments.getColumnModel().getColumn(2).setPreferredWidth(400);
        comments.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    @Nullable
    @Override
    protected JComponent createCenterPanel() {
        return panel;
    }

    private TableModel commentsModel(List<GitlabNote> notes) {
        Object[] columnNames = {"Author", "Date", "Text"};
        Object[][] data = new Object[notes.size()][columnNames.length];
        int i = 0;
        notes.sort((o1, o2) -> o2.getCreatedAt().compareTo(o1.getCreatedAt()));
        for (GitlabNote mergeRequest : notes) {
            Object[] row = new Object[columnNames.length];
            row[0] = mergeRequest.getAuthor().getName();
            row[1] = mergeRequest.getCreatedAt();
            row[2] = mergeRequest.getBody();
            data[i] = row;
            i++;
        }
        return new ReadOnlyTableModel(data, columnNames);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        comments = new JTable();
        scrollPane1.setViewportView(comments);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        addCommentButton = new JButton();
        addCommentButton.setIcon(new ImageIcon(getClass().getResource("/general/add.png")));
        addCommentButton.setText("Add Comment");
        panel1.add(addCommentButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}

package com.ppolivka.gitlabprojects.comment;

import com.intellij.openapi.progress.ProgressIndicator;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.openapi.ui.ValidationInfo;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.util.containers.Convertor;
import com.ppolivka.gitlabprojects.configuration.SettingsState;
import com.ppolivka.gitlabprojects.util.GitLabUtil;
import org.apache.commons.lang.StringUtils;
import org.gitlab.api.models.GitlabMergeRequest;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;

import static com.ppolivka.gitlabprojects.util.MessageUtil.showErrorDialog;

/**
 * Dialog for adding comments
 *
 * @author ppolivka
 * @since 1.3.2
 */
public class AddCommentDialog extends DialogWrapper {

    static SettingsState settingsState = SettingsState.getInstance();

    private JPanel panel;
    private JTextArea commentText;

    private Project project;
    private VirtualFile file;
    private GitlabMergeRequest mergeRequest;

    protected AddCommentDialog(@Nullable Project project, @NotNull GitlabMergeRequest mergeRequest, VirtualFile file) {
        super(project);
        this.project = project;
        this.mergeRequest = mergeRequest;
        init();
    }

    @Override
    protected void init() {
        super.init();
        setTitle("Add Comment");
        setOKButtonText("Add");
    }

    @Override
    protected void doOKAction() {
        super.doOKAction();
        GitLabUtil.computeValueInModal(project, "Adding comment...", (Convertor<ProgressIndicator, Void>) indicator -> {
            String comment = commentText.getText();
            if (StringUtils.isNotBlank(comment)) {
                try {
                    settingsState.api(project, file).addComment(mergeRequest, comment);
                } catch (IOException e) {
                    showErrorDialog(project, "Cannot add comment.", "Cannot Add Comment");
                }
            }
            return null;
        });
    }

    @Nullable
    @Override
    protected ValidationInfo doValidate() {
        if (StringUtils.isBlank(commentText.getText())) {
            return new ValidationInfo("Comment text cannot be empty.", commentText);
        }
        return super.doValidate();
    }

    @Nullable
    @Override
    protected JComponent createCenterPanel() {
        return panel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(400, 300), null, 0, false));
        commentText = new JTextArea();
        commentText.setLineWrap(true);
        commentText.setWrapStyleWord(true);
        scrollPane1.setViewportView(commentText);
        final JLabel label1 = new JLabel();
        label1.setText("Comment text:");
        panel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        label1.setLabelFor(commentText);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
